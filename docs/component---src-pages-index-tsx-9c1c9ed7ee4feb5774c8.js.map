{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/list-item.tsx","webpack://gatsby-starter-blog/./src/components/list.tsx","webpack://gatsby-starter-blog/./src/pages/index.tsx"],"names":["post","title","frontmatter","fields","slug","className","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","data","location","description","siteTitle","site","siteMetadata","posts","allMarkdownRemark","nodes","filter","includes","length","style","listStyle","map","key"],"mappings":"2MA4BA,EAzBiB,SAAC,GAAqB,IAApBA,EAAoB,EAApBA,KACTC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KAEpD,OACI,0BACI,2BACIC,UAAU,iBACVC,WAAS,EACTC,SAAS,6BACT,8BACI,0BACI,gBAAC,EAAAC,KAAD,CAAMC,GAAIT,EAAKG,OAAOC,KAAMM,SAAS,OACjC,wBAAMA,SAAS,YAAYT,MAIvC,+BACI,qBAAGI,UAAU,QAAQL,EAAKE,YAAYS,MACtC,qBAAGN,UAAU,UAAUO,wBAAyB,CAACC,OAAQb,EAAKc,SAAWJ,SAAS,oBCiBtG,EAhCa,SAAC,GAAmE,MAAlEK,EAAkE,EAAlEA,KAAMC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,YACrBC,GAAY,UAAAH,EAAKI,KAAKC,oBAAV,eAAwBnB,QAAxB,QAGZoB,EAFQN,EAAKO,kBAAkBC,MAEjBC,QAAO,SAAAxB,GAAI,OAAIA,EAAKE,YAAYe,YAAYQ,SAASR,MAEzE,OAAqB,IAAjBI,EAAMK,OAEF,gBAAC,IAAD,CAAQV,SAAUA,EAAUf,MAAOiB,GAC/B,gBAAC,IAAD,CAAKjB,MAAK,GAAKgB,IACf,sLAKA,4BAMR,gBAAC,IAAD,CAAQD,SAAUA,EAAUf,MAAOiB,GAC/B,gBAAC,IAAD,CAAKjB,MAAK,GAAKgB,IACf,sBAAIU,MAAO,CAACC,UAAW,SAClBP,EAAMQ,KACH,SAAA7B,GAAI,OAAK,gBAAC,EAAD,CAAUA,KAAMA,EAAM8B,IAAK9B,EAAKG,OAAOC,c,iECtBpE,UAJkB,SAAC,GAAyC,IAAxCW,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,SACtB,OAAO,gBAAC,IAAD,CAAMD,KAAMA,EAAMC,SAAUA,EAAUC,YAAW","file":"component---src-pages-index-tsx-9c1c9ed7ee4feb5774c8.js","sourcesContent":["import { Link } from \"gatsby\"\nimport * as React from \"react\"\n\nconst ListItem = ({post}: { post }) => {\n    const title = post.frontmatter.title || post.fields.slug\n\n    return (\n        <li>\n            <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\">\n                <header>\n                    <h2>\n                        <Link to={post.fields.slug} itemProp=\"url\">\n                            <span itemProp=\"headline\">{title}</span>\n                        </Link>\n                    </h2>\n                </header>\n                <section>\n                    <p className=\"date\">{post.frontmatter.date}</p>\n                    <p className=\"excerpt\" dangerouslySetInnerHTML={{__html: post.excerpt,}} itemProp=\"description\"/>\n                </section>\n            </article>\n        </li>\n    )\n}\n\nexport default ListItem\n","import * as React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport ListItem from \"../components/list-item\"\n\nconst List = ({data, location, description}: { data, location, description }) => {\n    const siteTitle = data.site.siteMetadata?.title || `Title`\n    const nodes = data.allMarkdownRemark.nodes\n\n    const posts = nodes.filter(post => post.frontmatter.description.includes(description))\n\n    if (posts.length === 0) {\n        return (\n            <Layout location={location} title={siteTitle}>\n                <SEO title={`${description}`}/>\n                <p>\n                    No blog posts found. Add markdown posts to \"content/blog\" (or the\n                    directory you specified for the \"gatsby-source-filesystem\" plugin in\n                    gatsby-config.js).\n                </p>\n                <hr/>\n            </Layout>\n        )\n    }\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <SEO title={`${description}`}/>\n            <ol style={{listStyle: `none`}}>\n                {posts.map(\n                    post => (<ListItem post={post} key={post.fields.slug}/>)\n                )}\n            </ol>\n        </Layout>\n    )\n}\n\nexport default List\n","import * as React from \"react\"\n\nimport List from \"../components/list\"\nimport { graphql } from \"gatsby\"\n\nconst BlogIndex = ({data, location}: { data, location }) => {\n    return <List data={data} location={location} description={`blogs`}/>\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n          summary\n        }\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY-MM-DD, hh:mm a\")\n          update(formatString: \"YYYY-MM-DD, hh:mm a\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}